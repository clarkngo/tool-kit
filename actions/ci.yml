name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install
          npm ci
        working-directory: backend-expressjs

      - name: Print Environment Variables
        run: printenv | sort
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        working-directory: backend-expressjs

      - name: Test the apps
        run: |
          npm run test
        working-directory: backend-expressjs
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
 
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan ZAP website
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory /home/runner/work/DIT637-TT04/DIT637-TT04

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Debug Network Configuration
        run: |
          echo "Checking network configuration..."
          curl -v https://registry-1.docker.io/v2/
          nslookup registry-1.docker.io

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://www.zaproxy.org'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

          
  deploy:
    name: Push to EC2 Instance
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Deploy to my EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ubuntu@${{ secrets.EC2_PUBLIC_DNS }} "rm -rf ~/backend-expressjs && mkdir ~/backend-expressjs"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key -r backend-expressjs/* ubuntu@${{ secrets.EC2_PUBLIC_DNS }}:~/backend-expressjs/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key .env ubuntu@${{ secrets.EC2_PUBLIC_DNS }}:~/backend-expressjs/.env
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Kill process on port 3000 and start backend
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ubuntu@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          sudo lsof -t -i:3000 | sudo xargs kill -9 || true # Kill any process using port 3000
          cd ~/backend-expressjs
          npm install
          export $(cat .env | xargs) # Load .env variables into the shell
          nohup npm start > app.log 2>&1 &
          sleep 5 # Give server time to start
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "Server is running at http://$PUBLIC_IP:3000"
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
